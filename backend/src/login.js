"use strict";var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};const multer_1=__importDefault(require("multer"));const path_1=__importDefault(require("path"));const logger_1=require("./logger");const fs_1=__importDefault(require("fs"));const express_1=__importDefault(require("express"));const crypto_1=__importDefault(require("crypto"));const db_connection_1=require("./db_connection");const router=express_1.default.Router();const checkFormat=req=>{const body=req.body;return body&&body.password&&typeof body.password==="string"&&body.dateOfBirth&&typeof body.dateOfBirth==="string"&&body.username&&typeof body.username==="string"&&body.email&&typeof body.email==="string"&&body.name&&typeof body.name==="string"&&body.country&&typeof body.country==="string"&&body.postcode&&typeof body.postcode==="string"&&body.city&&typeof body.city==="string"&&body.address&&typeof body.address==="string"&&body.phoneNumber&&typeof body.phoneNumber==="string"};const storage=multer_1.default.diskStorage({destination:function(req,file,cb){if(!fs_1.default.existsSync("data")){fs_1.default.mkdirSync("data");logger_1.logger.info("Created data folder")}const username=req.body.username;if(!req.body.username)return cb(new Error("No username present"),path_1.default.join(__dirname,"../data/"+username));if(!fs_1.default.existsSync("data/"+username)){fs_1.default.mkdirSync("data/"+username)}cb(null,path_1.default.join(__dirname,"../data/"+username))},filename:function(req,file,cb){const uniqueSuffix=Date.now()+"_"+Math.round(Math.random()*1e9);cb(null,req.body.username+"_"+uniqueSuffix)}});const upload=multer_1.default({storage:storage,limits:{fileSize:4096*4096},fileFilter:function(req,file,cb){if(file.mimetype==="image/png"||file.mimetype==="image/jpeg"||file.mimetype==="image/jpg"||file.mimetype==="application/pdf"){cb(null,true)}else{cb(null,false)}}});router.use(upload.array("idConfirmation",5));router.use((req,res,next)=>{if(req.files.length===0){res.status(400).send("Mandatory File Missing");return next(new Error("Mandatory File Missing"))}return next()});const undoFiles=files=>{const p=files[0].path.substr(0,files[0].path.lastIndexOf("/"));for(let i=0;i<files.length;i++){logger_1.logger.info("Unlinking file");fs_1.default.unlink(files[i].path,err=>{if(err){logger_1.logger.error(err)}})}fs_1.default.readdir(p,(err,files)=>{if(files.length===0){fs_1.default.rmdirSync(p)}})};router.use(async(req,res,next)=>{if(checkFormat(req)){return next()}if(Array.isArray(req.files)){undoFiles(req.files)}res.status(400).send("Wrong Body Format");return next(new Error("Wrong Body Format"))});router.use(async(req,res,next)=>{let query="SELECT 1 FROM public.users WHERE username = $1";const username=[req.body.username];const usernameQueryResult=await db_connection_1.pool.query(query,username);query="SELECT 1 FROM public.users WHERE email = $1";const email=[req.body.email];const emailQueryResult=await db_connection_1.pool.query(query,email);if(usernameQueryResult!=undefined&&usernameQueryResult.rowCount>0&&emailQueryResult!=undefined&&emailQueryResult.rowCount>0){res.status(405).send("Both already taken");if(Array.isArray(req.files)){undoFiles(req.files)}logger_1.logger.warn(`Duplicate username and email: ${username}, ${email} is already taken`);return next(new Error("Duplicate Username and Email"))}else if(usernameQueryResult!=undefined&&usernameQueryResult.rowCount>0){res.status(405).send("Username already taken");if(Array.isArray(req.files)){undoFiles(req.files)}logger_1.logger.warn(`Duplicate username: ${username} is already taken`);return next(new Error("Duplicate Username"))}else if(emailQueryResult!=undefined&&emailQueryResult.rowCount>0){res.status(405).send("Email already taken");if(Array.isArray(req.files)){undoFiles(req.files)}logger_1.logger.warn(`Duplicate email: ${email} is already taken`);return next(new Error("Duplicate Email Address"))}return next()});router.use(async(req,res,next)=>{const body=req.body;const files=req.files;const salt=crypto_1.default.randomBytes(16).toString("base64");const password=body.password;const hashed_password=crypto_1.default.pbkdf2Sync(password,salt,100,64,"sha256").toString("base64");const text="INSERT INTO public.users         (username, password, salt, email, full_name,             country, postcode, city, address, phone_number, documents_filename, date_of_birth,             registration_time, email_confirmed, identity_confirmed)             VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)";let conc="";if(!Array.isArray(files)){Object.entries(files).forEach(([key,value])=>{conc=conc+value+", "})}else{for(let i=0;i<files.length;i++){conc=conc+files[i].filename+", "}}conc=conc.substring(0,conc.length-1);const dateOfBirth=new Date(body.dateOfBirth);const registration_time=(new Date).toISOString().slice(0,19).replace("T"," ");const values=[body.username,hashed_password,salt,body.email,body.name,body.country,body.postcode,body.city,body.address,body.phoneNumber,conc,dateOfBirth,registration_time,false,false];await db_connection_1.pool.query(text,values).catch(error=>{res.status(500).send("Database error");if(Array.isArray(files)){undoFiles(files)}return next(new Error("Database error"))});res.status(200).send("Registration succesful");logger_1.logger.info("New user added to database");return next()});router.post("/",async(req,res,next)=>{if(req.files.length===0){res.status(400).send("Missing mandatory file or entered wrong format");return next(new Error("Missing mandatory file"))}logger_1.logger.info("Successfully uploaded files and checked input")});router.use(async(err,req,res,next)=>{if(err&&err.message.localeCompare("No username present")===0){res.status(400).send("Wrong body format");logger_1.logger.error(err.message);if(Array.isArray(req.Files)){undoFiles(req.Files)}}next()});module.exports=router;
